- authorize!
- studies = user_studies[user]
- name = list_id

= action_card_render ActionCard.new do

  %h4 Genotype overview

  %p Pvalues calculated by mutations-per-base-pair frequencies

  - all_matches = {}
  - pvalues = {}
  - Study.setup studies

  - TSV.traverse studies, :type => :array, :respawn => :always, :bar => @step.progress_bar('Processing studies') do |study|
    - Study.setup(study)
    - next unless study.has_genotypes?
    - log :knowledge_base, study + " Knowledge Base"
    - kb = study.knowledge_base
    - all_matches[study.to_s] = kb.subset(:sample_genes, :target => list, :source => :all)
    - log :pvalues, study + " Binomial P-values"
    - pvalues[study.to_s] = begin
      - bs = study.binomial_significance
      - list.select{|g| bs.include?(g) and bs[g].last.to_f < 0.1 }

  - fields = %w(Overlapping Affected Damaged Miss-spliced Broken Significant)
  - tsv = TSV.setup({}, :key_field => "Study", :fields => fields, :type => :double)

  - all_matches.each do |study,matches|
    - log :matches, study
    - next if matches.nil? or matches.empty?
    - study = Study.setup(study.dup)
    - num_samples = study.genotyped_samples.length
    - overlapping = matches.select_by(:info){|info| info["overlapping"] == "true" }.source_entity.uniq
    - affected = matches.select_by(:info){|info| info["affected"] == "true" }.source_entity.uniq
    - damaged = matches.select_by(:info){|info| info["damaged_mutated_isoform"] == "true" }.source_entity.uniq
    - splicing = matches.select_by(:info){|info| info["splicing"] == "true" }.source_entity.uniq
    - broken = matches.select_by(:info){|info| info["broken"] == "true" }.source_entity.uniq
    
    - values = (fields[0..-2].zip([overlapping, affected, damaged, splicing, broken])).collect do |type,list|
      - if list and list.any?
        - list.list_link("%.3g" % ((list_length = list.uniq.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{name} #{type} in #{ study }")
      - else
        - "None"

    - pvalue = pvalues[study].collect{|g| g.name }
    - values.push pvalue
    - tsv[study] = values

  - tsv.fields[0..-2].each do |field|
    - header field, "Link"
  - header "Significant", "Associated Gene Name", :organism => list.organism
  = table do
    - tsv

