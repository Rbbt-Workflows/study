#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'
require 'rbbt/workflow'

Workflow.require_workflow "Study"

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Bootstrap studies from a directory

$ rbbt workflow cmd Study [<directory>] [<study>,<study>,...]

If no directory is used, the default is used #{Sample.study_repo}

--cpus CPUs to use concurrently
-h--help Print this help
EOF
rbbt_usage and exit 0 if options[:help]

Sample.study_repo = Path.setup(ARGV.shift.dup) if ARGV.any? 

if ARGV.any?
  studies = Study.setup(ARGV.shift.split(","))
else
  studies = Sample.all_studies
end

studies = studies.select{|s| Study.setup(s.dup).has_genotypes? }

$cpus ||= options[:cpus] || 3
enrichment_databases = Enrichment::DATABASES - ['interpro', 'pfamm', 'biocarta', 'matador', 'kegg', 'gene_ages', 'go', 'go_bp', 'go_mf', 'go_cc', 'reactome', 'biogrid']

i = 0

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, [$cpus, studies.length].min, :respawn => :always do |study|
  Study.setup(study)

  job = study.sample_genes(:job)
  job.produce

  job = study.mutation_info(:job)
  job.produce

  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, [$cpus, studies.length].min, :respawn => :always do |study|
  Study.setup(study)
  Misc.bootstrap study.knowledge_base.registry.keys, 1, :respawn => :always do |database|
    study.knowledge_base.get_index(database).reverse
  end
  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, [$cpus, studies.length].min, :respawn => :always do |study|
  Study.setup(study)
  job = study.firestar(:job)
  job.produce

  job = study.kinmut(:job)
  job.produce

  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end


Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, 2, :respawn => :always do |study|

  Misc.bootstrap enrichment_databases, 2, :respawn => :always do |database|
    Study.setup(study)
    next if database == 'interpro'
    job = study.recurrent_gene_enrichment(:job, :database => database)
    job.produce
    #study.mutation_enrichment(true, :database => database)
    
    nil
  end
  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end


Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, 3, :respawn => :always do |study|
  Study.setup(study)
  job = study.firestar_neighbours(:job)
  job.produce

  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, 3, :respawn => :always do |study|
  Study.setup(study)
  job = study.mi_annotations(:job)
  job.produce

  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, 2, :respawn => :always do |study|
  Study.setup(study)
  job = study.binomial_significance(:job)
  job.produce

  Misc.bootstrap enrichment_databases, 2, :respawn => :always do |database|
    job = study.significant_gene_enrichment(:job, :database => database)
    job.produce
    nil
  end
  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, 1, :respawn => :always do |study|
  Study.setup(study)

  job = study.genomic_mutation_annotations(:job)
  job.produce

  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end

Log.warn "STUDY BOOTSTRAP - #{i+=1; i}"
Misc.bootstrap studies, 2, :respawn => :always do |study|

  Misc.bootstrap enrichment_databases, 2, :respawn => :always do |database|
    Study.setup(study)
    next if database == 'interpro'
    job = study.sample_enrichment(:job, :database => database)
    job.produce
    #study.mutation_enrichment(true, :database => database)
    nil
  end
  Log.warn "STUDY BOOTSTRAP - " + study
  nil
end
