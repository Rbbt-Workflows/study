#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Turn a MAF file into a project directory

$ #{$0} <filename.maf> <directory>

-h--help Print this help
-c--chromosome_field* Chromosome field
-s--start_field* Start field
-e--end_field* End field
-r--reference_field* Reference allele field 
-a--alternate_field* Alternative allele field 
-d--donor_field* Donor field
-sf--study_field* Study field
-o--organism Organism code
-w--watson* Mutations given in the watson or forward strand
-ex--exome* Exome sequencing, as opposed to Whole Genome
-u--users Users allowed for these studies

EOF
if options[:help]
  if defined? rbbt_usage
    rbbt_usage 
  else
    puts SOPT.usage
  end
  exit 0
end

filename, $directory = ARGV

raise "No filename specified" if filename.nil?
raise "File not found: #{ filename }" unless Open.exists? filename

c_field = options[:chromosome_field] || "Chromosome"
s_field = options[:start_field] || "Start_position"
e_field = options[:end_field] || "End_position"
r_field = options[:reference_field] || "Reference_Allele"
a_field = options[:alternate_field] || "Alternate_Allele"
d_field = options[:donor_id] || "Donor_ID"
sf_field = options[:study_field] || "Project_Code"

organism = options[:organism] || Organism.default_code("Hsa")
watson = options[:watson]
watson = true if watson.nil?
exome = options[:exome]
exome = true if exome.nil?
users = (options[:users] || 'public' ).split(",").collect{|u| u.strip }


all_fields = TSV.parse_header(filename, :header_hash => "").all_fields

c_pos  = Misc.field_position all_fields, c_field
s_pos  = Misc.field_position all_fields, s_field
e_pos  = Misc.field_position all_fields, e_field
r_pos  = Misc.field_position all_fields, r_field
a_pos  = Misc.field_position all_fields, a_field
d_pos  = Misc.field_position all_fields, d_field
sf_pos = Misc.field_position all_fields, sf_field

$directory = './project' unless $directory

$sample_streams = {}
def sample_stream(sample, study)
  mutation_file = File.join($directory, study, 'genotypes', sample)
  FileUtils.mkdir_p File.dirname(mutation_file) unless File.exists? File.dirname(mutation_file)
  Open.open(mutation_file, :mode => 'a')
end

sample_study = {}
TSV.traverse filename, :bar => true, :type => :array do |line|
  next if line =~ /^Chromosome/
  chr, start, eend, ref, _mut, sample, study = line.split("\t").values_at c_pos, s_pos, e_pos, r_pos, a_pos, d_pos, sf_pos
  start = start.to_i
  eend = eend.to_i

  pos, muts = Misc.correct_vcf_mutation start, ref, _mut
  mutations = muts.collect{|m| [chr, pos, m] * ":"}
  stream = sample_stream(sample, study)
  sample_study[sample] ||= study
  stream.puts mutations * "\n"
  stream.close
end

metadata_all = {:organism => organism, :watson => watson, :exome => exome, :users => users}
sample_study.each do |sample, study|
  metadata = metadata_all.dup
  metadata[:condition] = study
  Open.write(File.join($directory, study, 'metadata.yaml'), metadata.to_yaml)
end

