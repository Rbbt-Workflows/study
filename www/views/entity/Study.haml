- study = entity

- entity_card = EntityCard.new(study)
- entity_card.name = study
- entity_card.long_name = study.condition
- entity_card.meta
- entity_card.meta do
  :plain
    #{hash2dl study.metadata}
  %dl

    %dt Registered samples 
    %dd= study.samples.list_link :length, "Samples in #{ study }"

    - if study.respond_to?(:has_genotypes?) and study.has_genotypes?
      - samples = study.genotyped_samples
      %dt Genotyped samples
      %dd= samples.list_link :length, "Genotyped samples in #{ study }"

    - if study.respond_to?(:has_cnv?) and study.has_cnv?
      - samples = study.samples.select{|s| s.has_cnv? }
      %dt CNV samples
      %dd= samples.list_link :length, "CNV samples in #{ study }"

    - if study.respond_to?(:matrices) and study.matrices.any?
      %dt Matrices
      %dd
        %dl
          - study.matrices.each do |matrix|
            %dt #{matrix} samples
            %dd= Sample.setup(study.matrix(matrix).samples.dup, study).list_link :length, "Samples in #{study} matrix #{matrix}"




- entity_card.description do

  .row
    :documentation

      Affected genes have *non-synonymous* mutations or mutations on *splicing
      sites*. These mutations are considered *relevant*, as opossed to other
      intergenic, intronic and synonymous mutations which are disregarded for
      lack of interpretation tools (for now). Damaged genes have alterations
      believed to compromise the isoforms function. Broken are genes believed
      to have at least one of the alleles damaged or affected by splicing.
      The *missing* category contains genes that *could* have both alleles
      broken (two mutations, or an heterozygous mutation), and is intended
      for genetic analysis where considerations of zygosity are important.
      Surely missing have homozygous damaging mutations that indicate the
      lack of functional alleles for that gene. Recurrent genes are affected
      by mutations in at least two samples

  - if entity.has_genotypes?
    - study.knowledge_base.get_index(:mutation_info)
    - study.knowledge_base.get_index(:sample_genes)

    .row

      .mutations.responsive_column
        %h3 Mutations
        = fragment do
          -# log :all_mutations
          -# all = study.knowledge_base.all(:mutation_info)

          %table.ui.collapsing.table
            %tbody

              %tr
                %td All Mutations
                - log :metagenotype
                - metagenotype = study.genomic_mutations
                - metagenotype.extend AnnotatedArray
                %td= metagenotype.list_link :length, "All mutations in #{ entity }"
          
              %tr
                %td Relevant Mutations
                - log :relevant
                -# relevant = all.filter("affected" => 'true').source_entity.uniq
                - relevant = study.knowledge_base.get_database(:mutation_info).select("affected" => 'true').keys
                %td= relevant.list_link :length, "Relevant mutations in #{ entity }"

              %tr
                %td Damaging Mutations, incl. splicing 
                - log :broken
                -# broken = all.filter("broken" => 'true').source_entity.uniq
                - broken = study.knowledge_base.get_database(:mutation_info).select("broken" => 'true').keys
                %td= broken.list_link :length, "Damaging mutations in #{ entity }"

              %tr
                %td Recurrent Mutations
                - log :recurrent
                - recurrent = study.recurrent_mutations
                - recurrent.organism = study.organism
                - recurrent.extend AnnotatedArray
                %td= recurrent.list_link :length, "Recurrent mutations in #{ entity }"

      .genes.responsive_column
        %h3 Genes
        = fragment do
          %table.ui.collapsing.table
            %tbody

              %tr
                %td All Overlapping Genes
                %td= entity.get_genes.list_link :length, "All overlapping genes in #{ entity }"
          
              %tr
                %td Affected genes
                %td= entity.get_genes(:affected).uniq.list_link :length, "Affected genes in #{ entity }"

              %tr
                %td Damaged genes
                %td= entity.get_genes(:damaged_mutated_isoform).uniq.list_link :length, "Damaged genes in #{ entity }"

              %tr
                %td Broken genes 
                %td= entity.get_genes(:broken).uniq.list_link :length, "Broken genes in #{ entity }"

              -#%tr
                %td Missing genes
                %td= entity.get_genes(:missing?).list_link :length, "Missing genes in #{ entity }"

              -#%tr
                %td Surely missing genes
                %td= entity.get_genes(:missing).list_link :length, "Surely missing genes in #{ entity }"

              %tr
                %td Recurrent genes
                %td= entity.get_genes(:recurrent).list_link :length, "Recurrent genes in #{ entity }"

    .row
      .gene_samples
        %h3 Gene status by sample
        = fragment do
          = table :row_ids => :consume do
            - matches = study.knowledge_base.subset(:sample_genes, :all)
            - matches.tsv

    -#%hr.ui.divider
    -#.row
      .mutation_details
        = fragment do
          - mutation_info = study.mutation_info
          - metagenotype = study.genomic_mutations
          - all = study.knowledge_base.all(:mutation_info)
          - relevant = all.filter("affected" => 'true').source_entity
          = fragment relevant.list_action_link :mutation_details, nil, "Relevant mutations in #{entity}"


- entity_card.action_controller = default_action_controller entity

= entity_card_render entity_card

